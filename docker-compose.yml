services:
# --- Frontend Service ---
  frontend:
    build:
      context: ./mini_crm_frontend
      dockerfile: Dockerfile
    container_name: mini-crm-frontend
    ports:
      - "5173:5173"
    env_file:
      - ./mini_crm_frontend/.env
    networks:
      - minicrm_net
    restart: unless-stopped

    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      backend:
        condition: service_started
      consumer:
        condition: service_started
      vendor:
        condition: service_started
      data_injestion:
        condition: service_started

  # --- Backend API ---
  backend:
    build:
      context: ./minicrm_backend
      dockerfile: Dockerfile
    container_name: minicrm_backend
    ports:
      - "3000:3000" # expose API to host
    env_file:
      - ./minicrm_backend/.env
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - minicrm_net
    restart: always

  # --- Consumer ---
  consumer:
    build:
      context: ./minicrm_backend_consumer
      dockerfile: Dockerfile
    container_name: minicrm_consumer
    ports:
      - "3500:3500" # expose API to host
    env_file:
      - ./minicrm_backend_consumer/.env
    depends_on:
      - db
      - kafka
      - backend
    networks:
      - minicrm_net

  # --- Vendor Service ---
  vendor:
    build:
      context: ./vendor_faker
      dockerfile: Dockerfile
    container_name: vendor_faker
    depends_on:
      - kafka
      - backend
    networks:
      - minicrm_net

  # --- Data Ingestion (faker) ---
  data_injestion:
    build:
      context: ./data_injestion_faker
      dockerfile: Dockerfile
    container_name: data_injestion_faker
    env_file:
    - ./data_injestion_faker/.env
    depends_on:
      - kafka
      - backend
    networks:
      - minicrm_net

  # --- Lightweight Postgres ---
  db:
    image: postgres:15-alpine
    container_name: minicrm_db
    restart: always
    environment:
      POSTGRES_USER: minicrm_user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: minicrm
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5440:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - minicrm_net

  # --- Lightweight Kafka (Bitnami single-node) ---
  kafka:
    image: bitnami/kafka:latest
    container_name: minicrm_kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_LOG_DIRS: /bitnami/kafka/data
      ALLOW_PLAINTEXT_LISTENER: yes
    
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9092 --list || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 20s

    
    volumes:
      - kafka_data:/bitnami/kafka/data
    networks:
      - minicrm_net


networks:
  minicrm_net:

volumes:
  db_data:
  kafka_data:
